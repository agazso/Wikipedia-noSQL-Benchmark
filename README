The easy way to use this is to import it as an existing Eclipse project. Then you will have to set the Eclipse variable to add in the classpath everything needed. The 
versions of the databases used are :
<ul>
	<li>Hadoop 0.20.2 and HBase 0.20.6</li>
	<li>Cassandra 0.6.10</li>
	<li>MongoDB 1.6.5 with the <a href="https://github.com/downloads/mongodb/mongo-java-driver/mongo-2.3.jar">java binding 2.3</a></li>
	<li>Riak 0.14</li>
</ul>
Once all the imports are working, you can make the jar file that you will use to run your tests with Eclipse :
<ol>
	<li>Right click on the project on left column then select export</li>
	<li>Then select Java / Runnable JAR file and click next</li>
	<li>Select "runBenchmark"  as launch configuration, choose an export destination and select "Package required libraries into generated JAR" as library handling</li>
	<li>click on Finish</li>
</ol>
For Cassandra and HBase, there is a little more configuration needed. For Cassandra edit the file storage-conf.xml to reflect you cluster configuration. For HBase edit the 
file hbase-site.xml to reflect your cluster configuration and don't forget to edit hbaseDB.java to change the localisation of your configuration file on the line 39. Please 
note that this should be the path to the configuration file on the machine on which you plan to run the jar file.

If you want to <strong>benchmark the read and update performances </strong>call the jarfile like this :

<strong>java -jar jarfile.jar dbType totalNumberOp readPercentage IP1 IP2 IP3 ...</strong>

<strong>dbType</strong> can currently take the following values :
<ul>
	<li>cassandra</li>
	<li>scalaris (please note that the current implementation should be optimized)</li>
	<li>voldemort (no MapReduce implementation so only read/update can be benchmarked)</li>
	<li>terrastore (partial implementation, needs work)</li>
	<li>riak</li>
	<li>mongodb</li>
	<li>hbase</li>
</ul>
<strong>totalNumberOp</strong> is the total number of operations that will be requested to the cluster.

<strong>readPercentage</strong> is the proportion of requests that will be read-only

<strong>IP1 IP2 IP3 ...</strong> is a list of IP that can be as long as desired. For the systems without a load balancer, I put in the list the IP of each active node in 
the cluster. For systems with a load balancer, I simply put the IP of the load balancer as many time as there are active nodes in the cluster.

If you want to <strong>benchmark the MapReduce performances</strong>, call the jar file like this :

<strong>java -jar jarfile.jar dbType search numberOfRuns IP</strong>

<strong>dbType</strong> can take any value listed just before provided that this database has a MapReduce implementation.

<strong>search</strong> is a constant

<strong>numberOfRuns</strong> is the number of time that the search benchmark will be run

<strong>IP </strong>is the IP of one of the nodes of the cluster that accept MapReduce jobs


